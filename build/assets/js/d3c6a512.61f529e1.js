"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6680],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return h}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=c(t),h=i,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||s;return t?r.createElement(m,o(o({ref:n},p),{},{components:t})):r.createElement(m,o({ref:n},p))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,o=new Array(s);o[0]=d;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var c=2;c<s;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1323:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return u}});var r=t(3117),i=t(102),s=(t(7294),t(3905)),o=["components"],a={sidebar_position:4},l="Unlocking Content",c={unversionedId:"integration/cms/unlocking-content",id:"integration/cms/unlocking-content",title:"Unlocking Content",description:"When a user has purchased a post the unlocked content can be displayed using the sesamy-content-container component. The content can either be embedded directly on the page or fetched from the server using a signed url.",source:"@site/docs/integration/cms/unlocking-content.md",sourceDirName:"integration/cms",slug:"/integration/cms/unlocking-content",permalink:"/docs/integration/cms/unlocking-content",draft:!1,editUrl:"https://github.com/sesamyab/docs/blob/dev/docs/integration/cms/unlocking-content.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Passes",permalink:"/docs/integration/cms/passes"}},p={},u=[{value:"Signed link validation",id:"signed-link-validation",level:2},{value:"Validation of the signature",id:"validation-of-the-signature",level:2},{value:"Signed link with pass",id:"signed-link-with-pass",level:3},{value:"Serving locked content via API",id:"serving-locked-content-via-api",level:2},{value:"Cross-Origin Resource Sharing (CORS)",id:"cross-origin-resource-sharing-cors",level:3}],d={toc:u};function h(e){var n=e.components,t=(0,i.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"unlocking-content"},"Unlocking Content"),(0,s.kt)("p",null,"When a user has purchased a post the unlocked content can be displayed using the ",(0,s.kt)("inlineCode",{parentName:"p"},"sesamy-content-container")," component. The content can either be embedded directly on the page or fetched from the server using a signed url."),(0,s.kt)("p",null,"The signed Urls can be shared in an order confirmation email and render a page without any further authentication. To avoid the signed links being distributed they have a limited expiry."),(0,s.kt)("p",null,"The signed Urls require that the CMS hosting the content can validate the signature and serve the locked content for valid requests."),(0,s.kt)("h2",{id:"signed-link-validation"},"Signed link validation"),(0,s.kt)("p",null,"The links consists of four parts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Url of the content"),(0,s.kt)("li",{parentName:"ul"},"Optional information, such as the Publisher's Content ID"),(0,s.kt)("li",{parentName:"ul"},"Expiration timestamp"),(0,s.kt)("li",{parentName:"ul"},"Signature of the previous parts of the url")),(0,s.kt)("p",null,"This is a sample of a signed link:\n",(0,s.kt)("inlineCode",{parentName:"p"},"https://test.example.com/test-article?se=TIMESTAMP&si=PUBLISHER_CONTENT_ID&ss=RSA_256_HASH")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"https://test.example.com/test-article")," is the url of the purchased article, ",(0,s.kt)("inlineCode",{parentName:"p"},"se=1656098737770")," is the expiration timestamp of the url and ",(0,s.kt)("inlineCode",{parentName:"p"},"ss=...")," is the signature."),(0,s.kt)("p",null,"If a publisher provided a Publisher Content ID in the metatags this ID will also be passed as an ",(0,s.kt)("inlineCode",{parentName:"p"},"sp")," querystring parameter in the signed link:\n",(0,s.kt)("inlineCode",{parentName:"p"},"https://test.example.com/test-article?sp=PUBLISHER_CONTENT_ID&se=TIMESTAMP&si=PUBLISHER_PRODUCT_ID&ss=RSA_256_HASH")),(0,s.kt)("h2",{id:"validation-of-the-signature"},"Validation of the signature"),(0,s.kt)("p",null,"The urls are signed with an ",(0,s.kt)("inlineCode",{parentName:"p"},"RSA256")," asymetric key that can be verified with the public Sesamy key. The public key is published in a jwks-format here: ",(0,s.kt)("inlineCode",{parentName:"p"},"https://assets.sesamy.com/vault-jwks.json")),(0,s.kt)("p",null,"This is an example of how to verify the signed url in node-js with typescript:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"import { verify, createPublicKey, KeyObject } from 'crypto';\nimport jwkToPem from 'jwk-to-pem';\n\nasync function fetchPublicKey() {\nconst response = await fetch('https://assets.sesamy.com/vault-jwks.json');\n\n    if (!response.ok) {\n        throw new Error('Failed to fetch public key');\n    }\n\n    return response.json();\n\n}\n\nasync function getPublicKey() {\nconst jwks = await fetchPublicKey();\n\n    const pemKey = jwkToPem(jwks);\n    return createPublicKey(pemKey);\n\n}\n\nasync function verifySignature(signedUrl: string) {\nconst publicKey = await getPublicKey();\n\n    const [url, signature] = signedUrl.split('&ss=');\n    if (!verify('RSA-SHA256', Buffer.from(url), publicKey, Buffer.from(signature, 'base64'))) {\n        throw new Error('Signature not valid');\n    }\n\n}\n\n")),(0,s.kt)("p",null,"This is an example of how to verify the signed url in php:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse Jose\\Component\\Core\\JWK;\nuse Jose\\Component\\Core\\AlgorithmManager;\nuse Jose\\Component\\Signature\\Algorithm\\RS256;\n\nfunction verify_signature($url)\n{\n    $url_to_sign = explode('&ss=', $url)[0];\n    $signature = explode('&ss=', $url)[1];\n\n    $parsed_url = parse_url($url);\n    parse_str($parsed_url['query'], $parsed_query);\n\n    $expire = $parsed_query['se'];\n    if ($expire  < time()) {\n        return new Exception('Link is expired');\n    }\n\n    $algorithm_manager = new AlgorithmManager([\n        new RS256()\n    ]);\n\n    $rs256 = $algorithm_manager->get('RS256');\n    $json = '{\n        \"kty\": \"RSA\",\n        \"n\": \"sFATY4fG4n822Zn8bQpszyF9navI_O5lwEg12fEHJGq69EKEfX1xFBXYNj8xEg6ROe4Zl-ssG1Co3Mb3M8zSE9shGSNmMB86oqPOZ9RZTYmiGg_Uh6FqGuP_-SzUC6k8gGVzoo1gn06dqv_S06cT7GW616T57DVHS280FPZ1JLmu88VaBhY_8kgCAqEWgdveLYYWzJhuiTcocCUVRbIElKwWzLbze4BpUQtLQmW5QL-zwYOYXlbamnN-2VP7ZshTqRZEG-LCwI9DEWVUZsdSBdDtG0xH8aTf1BxCAcdcFdPJM2lNa9DmQnNlcB420jL3vKu2mFxxE1Zn_5PIu19pmQ\",\n        \"e\": \"AQAB\"\n        }';\n    $jwk = JWK::createFromJson($json);\n    return $rs256->verify($jwk, $url_to_sign, base64_decode($signature));\n}\n\n")),(0,s.kt)("h3",{id:"signed-link-with-pass"},"Signed link with pass"),(0,s.kt)("p",null,"If an article is part of a pass (for instance a subscription) the signed link will be for the pass rather than the article. This way a signed link can be reused for all articles within a subscription until the link has expired. In this case the backend needs to validate that the article is part of the pass before serving the content."),(0,s.kt)("p",null,"The signed link is passed to the backend as a pass query string (the signature is shortened for brevity):\n",(0,s.kt)("inlineCode",{parentName:"p"},"https://test.example.com/test-article?pass=https%3A%2F%2Ftest.example.com%2Fsubscription%3Fse%3D1656098737770%26si%3D113%26ss%3DPTKUZ...")),(0,s.kt)("h2",{id:"serving-locked-content-via-api"},"Serving locked content via API"),(0,s.kt)("p",null,"By setting the lock mode of the content-container web component to ",(0,s.kt)("inlineCode",{parentName:"p"},"signedUrl")," the content is fetched from the server. By default it fetches the locked content from the article url using the signed url, but by specifying the ",(0,s.kt)("inlineCode",{parentName:"p"},"access-url")," property on the content-container it will use this url to fetch the locked content and pass the signed url in the ",(0,s.kt)("inlineCode",{parentName:"p"},"x-sesamy-signed-url")," header instead:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'<sesamy-content-container\n    lock-mode="signedUrl"\n    access-url="https://example.com/api/access/test-article"\n>\n')),(0,s.kt)("h3",{id:"cross-origin-resource-sharing-cors"},"Cross-Origin Resource Sharing (CORS)"),(0,s.kt)("p",null,"Cross-Origin Resource Sharing (CORS) is a browser mechanism which enables controlled access to resources located outside of the browser domain. When serving content from an API endpoint on a separate domain the API needs to handle ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request"},"preflight requests"),"."))}h.isMDXComponent=!0}}]);